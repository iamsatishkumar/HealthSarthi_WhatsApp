import datetime
from typing import List, Dict, Any

# Simulated outbreak data - in real implementation, this would come from government APIs
outbreaks = {
    'active': [
        {
            'id': 'OUT-2025-001',
            'disease': 'Dengue',
            'location': 'Delhi, India',
            'severity': 'High',
            'cases': 1250,
            'start_date': '2025-01-15',
            'status': 'Active',
            'precautions': [
                'Use mosquito repellents',
                'Wear long-sleeved clothing',
                'Eliminate standing water',
                'Use mosquito nets'
            ],
            'affected_areas': ['Delhi', 'Gurgaon', 'Noida']
        },
        {
            'id': 'OUT-2025-002',
            'disease': 'Malaria',
            'location': 'Odisha, India',
            'severity': 'Medium',
            'cases': 450,
            'start_date': '2025-02-01',
            'status': 'Active',
            'precautions': [
                'Use mosquito nets',
                'Take antimalarial medication',
                'Wear protective clothing',
                'Avoid outdoor activities at dawn/dusk'
            ],
            'affected_areas': ['Koraput', 'Malkangiri', 'Nabarangpur']
        }
    ],
    'resolved': [
        {
            'id': 'OUT-2024-015',
            'disease': 'COVID-19',
            'location': 'Global',
            'severity': 'Low',
            'cases': 0,
            'start_date': '2024-12-01',
            'end_date': '2025-01-15',
            'status': 'Resolved',
            'precautions': []
        }
    ]
}

def get_active_outbreaks() -> List[Dict[str, Any]]:
    """Get all active outbreaks"""
    return outbreaks['active']

def get_outbreaks_by_location(location: str) -> List[Dict[str, Any]]:
    """Get outbreaks for specific location"""
    location_lower = location.lower()
    result = []

    for outbreak in outbreaks['active']:
        if any(area.lower() in location_lower or location_lower in area.lower()
               for area in outbreak['affected_areas']):
            result.append(outbreak)

    return result

def get_outbreaks_by_disease(disease: str) -> List[Dict[str, Any]]:
    """Get outbreaks for specific disease"""
    disease_lower = disease.lower()
    result = []

    for outbreak in outbreaks['active']:
        if disease_lower in outbreak['disease'].lower():
            result.append(outbreak)

    return result

def get_outbreak_alerts(language: str = 'en') -> str:
    """Generate outbreak alert message"""
    active_outbreaks = get_active_outbreaks()

    if not active_outbreaks:
        if language == 'hi':
            return "рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдХреЛрдИ рд╕рдХреНрд░рд┐рдп рдорд╣рд╛рдорд╛рд░реА рдирд╣реАрдВ рд╣реИред"
        elif language == 'ta':
            return "родро▒рпНрокрпЛродрпБ роЪрпЖропро▓ро┐ро▓рпН роЙро│рпНро│ роОроирпНродро╡рпКро░рпБ ро╡рпЖроЯро┐рокрпНрокрпБроорпН роЗро▓рпНро▓рпИ."
        elif language == 'te':
            return "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░Ор░Яр▒Бр░╡р░Вр░Яр░┐ р░Ър▒Бр░░р▒Бр░Хр▒Ир░и р░╡р▒Нр░пр░╛р░зр░┐ р░╡р▒Жр░▓р▒Нр░▓р▒Бр░╡ р░▓р▒Зр░жр▒Б."
        else:
            return "No active outbreaks currently."

    alert_message = ""
    if language == 'en':
        alert_message = f"ЁЯЪи HEALTH ALERT: {len(active_outbreaks)} active outbreak(s) reported:\n\n"
        for outbreak in active_outbreaks:
            alert_message += f"тАв {outbreak['disease']} in {outbreak['location']}\n"
            alert_message += f"  Severity: {outbreak['severity']} ({outbreak['cases']} cases)\n"
            alert_message += f"  Precautions: {', '.join(outbreak['precautions'][:2])}...\n\n"
    elif language == 'hi':
        alert_message = f"ЁЯЪи рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЪреЗрддрд╛рд╡рдиреА: {len(active_outbreaks)} рд╕рдХреНрд░рд┐рдп рдорд╣рд╛рдорд╛рд░реА рдХреА рд╕реВрдЪрдирд╛:\n\n"
        for outbreak in active_outbreaks:
            alert_message += f"тАв {outbreak['location']} рдореЗрдВ {outbreak['disease']}\n"
            alert_message += f"  рдЧрдВрднреАрд░рддрд╛: {outbreak['severity']} ({outbreak['cases']} рдорд╛рдорд▓реЗ)\n"
            alert_message += f"  рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдБ: {', '.join(outbreak['precautions'][:2])}...\n\n"

    return alert_message

def check_location_risk(location: str, language: str = 'en') -> str:
    """Check if location has any outbreak risks"""
    location_outbreaks = get_outbreaks_by_location(location)

    if not location_outbreaks:
        if language == 'hi':
            return f"{location} рдореЗрдВ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдХреЛрдИ рдорд╣рд╛рдорд╛рд░реА рдЬреЛрдЦрд┐рдо рдирд╣реАрдВ рд╣реИред"
        elif language == 'ta':
            return f"{location} роЗро▓рпН родро▒рпНрокрпЛродрпБ роОроирпНрод ро╡рпЖроЯро┐рокрпНрокрпБ роЕрокро╛ропроорпБроорпН роЗро▓рпНро▓рпИ."
        elif language == 'te':
            return f"{location} р░▓р▒Л р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░Ор░Яр▒Бр░╡р░Вр░Яр░┐ р░╡р▒Нр░пр░╛р░зр░┐ р░╡р▒Жр░▓р▒Нр░▓р▒Бр░╡ р░кр▒Нр░░р░ор░╛р░жр░В р░▓р▒Зр░жр▒Б."
        else:
            return f"No current outbreak risks in {location}."

    risk_message = ""
    if language == 'en':
        risk_message = f"тЪая╕П RISK ALERT for {location}:\n\n"
        for outbreak in location_outbreaks:
            risk_message += f"тАв {outbreak['disease']} outbreak active\n"
            risk_message += f"  Cases: {outbreak['cases']}\n"
            risk_message += f"  Key precautions:\n"
            for precaution in outbreak['precautions'][:3]:
                risk_message += f"    - {precaution}\n"
            risk_message += "\n"
    elif language == 'hi':
        risk_message = f"тЪая╕П {location} рдХреЗ рд▓рд┐рдП рдЬреЛрдЦрд┐рдо рдЪреЗрддрд╛рд╡рдиреА:\n\n"
        for outbreak in location_outbreaks:
            risk_message += f"тАв {outbreak['disease']} рдорд╣рд╛рдорд╛рд░реА рд╕рдХреНрд░рд┐рдп\n"
            risk_message += f"  рдорд╛рдорд▓реЗ: {outbreak['cases']}\n"
            risk_message += f"  рдореБрдЦреНрдп рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдБ:\n"
            for precaution in outbreak['precautions'][:3]:
                risk_message += f"    - {precaution}\n"
            risk_message += "\n"

    return risk_message